/*
 * amf_event_mode.h
 *
 * Describes how the reports shall be generated by a subscribed event
 */

#ifndef _amf_event_mode_H_
#define _amf_event_mode_H_

#include <string.h>
#include "../external/cJSON.h"
#include "../include/list.h"
#include "../include/keyValuePair.h"
#include "../include/binary.h"
#include "amf_event_mode_muting_exc_instructions.h"
#include "amf_event_trigger.h"
#include "muting_notifications_settings.h"
#include "notification_flag.h"
#include "partitioning_criteria.h"
#include "var_rep_period.h"

#ifdef __cplusplus
extern "C" {
#endif

typedef struct amf_event_mode_s amf_event_mode_t;
typedef struct amf_event_mode_s {
	struct amf_event_trigger_s *trigger;
	bool is_max_reports;
	int max_reports;
	char *expiry;
	bool is_rep_period;
	int rep_period;
	bool is_samp_ratio;
	int samp_ratio;
	list_t *partitioning_criteria;
	struct notification_flag_s *notif_flag;
	struct amf_event_mode_muting_exc_instructions_s *muting_exc_instructions;
	struct muting_notifications_settings_s *muting_not_settings;
	list_t *var_rep_period_info;
} amf_event_mode_t;

amf_event_mode_t *amf_event_mode_create(amf_event_trigger_t *trigger,
                                        bool is_max_reports, int max_reports,
                                        char *expiry, bool is_rep_period,
                                        int rep_period, bool is_samp_ratio,
                                        int samp_ratio,
                                        list_t *partitioning_criteria,
                                        notification_flag_t *notif_flag,
                                        amf_event_mode_muting_exc_instructions_t *muting_exc_instructions, muting_notifications_settings_t *muting_not_settings, list_t *var_rep_period_info);
void amf_event_mode_free(amf_event_mode_t *amf_event_mode);
amf_event_mode_t *amf_event_mode_parseFromJSON(cJSON *amf_event_modeJSON);
cJSON *amf_event_mode_convertToJSON(amf_event_mode_t *amf_event_mode);
amf_event_mode_t *amf_event_mode_copy(amf_event_mode_t	*dst,
                                      amf_event_mode_t	*src);

#ifdef __cplusplus
}
#endif

#endif /* _amf_event_mode_H_ */
